import certifi, os
os.environ["SSL_CERT_FILE"] = certifi.where()
os.environ["REQUESTS_CA_BUNDLE"] = certifi.where()
import streamlit as st
from pdfminer.high_level import extract_text
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_openai import ChatOpenAI, OpenAIEmbeddings
from langchain_community.vectorstores import Chroma
from langchain.chains import RetrievalQA
import tempfile
import os
import httpx
import tiktoken


import os
os.environ["PYTHONHTTPSVERIFY"] = "0"

# Set tiktoken cache directory
tiktoken_cache_dir = "./token"
os.environ["TIKTOKEN_CACHE_DIR"] = tiktoken_cache_dir

# Disable SSL verification for httpx
client = httpx.Client(verify=False)

# LLM and Embedding setup
llm = ChatOpenAI(
    base_url="https://genailab.tcs.in",
    model="azure_ai/genailab-maas-DeepSeek-V3-0324",
    api_key="sk-fY5-0SO0_lLrrWXSRGRiCQ",
    http_client=client
)

embedding_model = OpenAIEmbeddings(
    base_url="https://genailab.tcs.in",
    model="azure/genailab-maas-text-embedding-3-large",
    api_key="sk-fY5-0SO0_lLrrWXSRGRiCQ",
    http_client=client
)

# Streamlit UI
st.set_page_config(page_title="RAG PDF Summarizer")
st.title("RAG-powered PDF Summarizer")

upload_file = st.file_uploader("Upload a PDF", type="pdf")

if upload_file:
    # Step 1: Save uploaded file temporarily
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as temp_file:
        temp_file.write(upload_file.read())
        temp_file_path = temp_file.name

    # Step 2: Extract text
    raw_text = extract_text(temp_file_path)

    # Step 3: Chunking
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
    chunks = text_splitter.split_text(raw_text)

    # Step 4: Embed and store in Chroma
    with st.spinner("Indexing document..."):
        vectordb = Chroma.from_texts(
            chunks,
            embedding_model,
            persist_directory="./chroma_index"
        )
        vectordb.persist()

    # Step 5: RAG QA Chain
    # retriever = vectordb.as_retriever(search_type="similarity", search_kwargs={"k": 5})
    retriever = vectordb.as_retriever()
    rag_chain = RetrievalQA.from_chain_type(
        llm=llm,
        retriever=retriever,
        return_source_documents=True
    )

    # Step 6: Ask summarization prompt
    summary_prompt = "Please summarize this document based on the key topics:"
    with st.spinner("Running RAG summarization..."):
        # result = rag_chain.run(summary_prompt)
        result = rag_chain.invoke(summary_prompt)

    # Step 7: Show output
    st.subheader("Summary")
    st.write(result)
